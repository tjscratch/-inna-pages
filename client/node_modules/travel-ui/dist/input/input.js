'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /**
                    * Created by max on 05.08.16.
                    */


var _bemCn = require('bem-cn');

var _bemCn2 = _interopRequireDefault(_bemCn);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var b = (0, _bemCn2.default)('TravelUiInput');

var Input = (_temp = _class = function (_Component) {
    _inherits(Input, _Component);

    function Input() {
        _classCallCheck(this, Input);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Input).apply(this, arguments));
    }

    _createClass(Input, [{
        key: 'fieldFocus',
        value: function fieldFocus(e) {
            var borderColorPrimary = this.props.UiTravel.borderColorPrimary;


            var field = e.target;

            field.className = b('Field')({ focus: true });
            field.style.borderColor = borderColorPrimary;
        }
    }, {
        key: 'fieldOnBlur',
        value: function fieldOnBlur(e) {
            var _props$UiTravel = this.props.UiTravel;
            var borderColor = _props$UiTravel.borderColor;
            var borderColorError = _props$UiTravel.borderColorError;
            var invalid = this.props.invalid;


            var field = e.target;

            field.className = b('Field')({ used: field.value && field.value.length ? true : false });

            if (invalid) {
                field.style.borderColor = borderColorError;
            } else {
                field.style.borderColor = borderColor;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var label = _props.label;
            var style = _props.style;
            var invalid = _props.invalid;
            var error = _props.error;
            var onChange = _props.onChange;
            var onClick = _props.onClick;
            var type = _props.type;
            var value = _props.value;
            var className = _props.className;


            var inputStyle = this.props.inputStyle;

            return _react2.default.createElement(
                'div',
                {
                    className: b({ skin: className }),
                    style: style },
                _react2.default.createElement('input', {
                    onClick: onClick,
                    onFocus: this.fieldFocus.bind(this),
                    onBlur: this.fieldOnBlur.bind(this),
                    type: type,
                    className: b('Field')({ used: value && value.length ? true : false }),
                    style: inputStyle,
                    value: value,
                    onChange: onChange,
                    ref: 'field',
                    required: true }),
                _react2.default.createElement(
                    'label',
                    { className: b('Label') },
                    _react2.default.createElement(
                        'span',
                        { ref: 'label' },
                        label
                    )
                ),
                invalid ? _react2.default.createElement(
                    'div',
                    { className: b('Info')({ error: invalid ? true : false }) },
                    error
                ) : null
            );
        }
    }]);

    return Input;
}(_react.Component), _class.displayName = 'Input', _class.contextTypes = {
    componentStyle: _react2.default.PropTypes.object
}, _class.propTypes = {
    className: _react.PropTypes.string,
    inputStyle: _react.PropTypes.object,
    isError: _react.PropTypes.bool,
    isSuccess: _react.PropTypes.bool,
    label: _react.PropTypes.string,
    message: _react.PropTypes.node,
    onChange: _react.PropTypes.func,
    onClick: _react.PropTypes.func,
    onFocus: _react.PropTypes.func,
    readOnly: _react.PropTypes.bool,
    style: _react.PropTypes.object,
    type: _react.PropTypes.string,
    value: _react.PropTypes.string
}, _class.defaultProps = {
    className: '',
    inputStyle: {},
    isError: false,
    isSuccess: false,
    message: '',
    readOnly: false,
    style: {},
    type: 'text',
    value: ''
}, _temp);


function mapStateToProps(state) {
    return {
        UiTravel: state.UiTravel
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps)(Input);