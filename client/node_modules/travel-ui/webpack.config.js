var path = require('path');
var NODE_ENV = process.env.NODE_ENV || 'development';
var webpack = require('webpack');
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var extractCSS = new ExtractTextPlugin('styles.css', {allChunks: true});

if (NODE_ENV == 'development') {
    module.exports = {
        devtool: 'eval',
        entry: [
            'webpack-dev-server/client?http://localhost:4000',
            'webpack/hot/only-dev-server',
            './example/app'
        ],
        output: {
            path: path.join(__dirname, 'build'),
            filename: 'app.js',
            publicPath: '/build/'
        },
        plugins: [
            new webpack.optimize.OccurenceOrderPlugin(),
            new webpack.HotModuleReplacementPlugin(),
            new webpack.NoErrorsPlugin()
        ],
        module: {
            preLoaders: [ //добавили ESlint в preloaders
                {
                    test: /\.js$/,
                    loaders: ['eslint'],
                    include: [
                        path.resolve(__dirname, "example"),
                        path.resolve(__dirname, "src")
                    ],
                }
            ],
            loaders: [
                {
                    test: /\.scss$/i,
                    loaders: [
                        "style",
                        "css?sourceMap",
                        "autoprefixer-loader?browsers=last 2 versions",
                        "resolve-url",
                        "sass?sourceMap"
                    ]
                },
                {
                    test: /\.js$/i,
                    loaders: ['react-hot', 'babel'],
                    //exclude: [
                    //    path.resolve(__dirname, 'dist'),
                    //    path.resolve(__dirname, 'node_modules')
                    //]
                    include: [
                        path.join(__dirname, 'example'),
                        path.join(__dirname, 'src')
                    ]
                    //plugins: ['transform-runtime']
                },
            ],
            plugins: [extractCSS]
        },
        
        //devServer: {
        //    host: 'localhost',
        //    port: 4000,
        //contentBase: __dirname + '/example'
        //}
    };
    
}

if (NODE_ENV == 'production') {
    module.exports = {
        devtool: 'source-map',
    
        entry: {
            'index': './src/index.js',
        },
    
        output: {
            path: './dist',
            filename: '[name].js',
            library: 'TravelUi',
            libraryTarget: 'umd',
        },
    
        plugins: [
            new webpack.optimize.OccurenceOrderPlugin(),
            new webpack.HotModuleReplacementPlugin(),
            new webpack.NoErrorsPlugin(),
            new webpack.DefinePlugin({
                'process.env': {
                    NODE_ENV: JSON.stringify('production')
                }
            })
        ],
    
        resolve: {
            modulesDirectories: ['node_modules'],
            extensions: ['', '.js']
        },
    
        resolveLoader: {
            modulesDirectories: ['node_modules'],
            moduleTemplates: ['*-loader', '*'],
            extensions: ['', '.js']
        },
        
        module: {
            loaders: [
                {
                    test: /\.scss$/i,
                    loaders: [
                        "style",
                        "css",
                        "autoprefixer-loader?browsers=last 2 versions",
                        "resolve-url",
                        "sass"
                    ]
                },
                {
                    test: /\.js$/i,
                    loaders: ['react-hot', 'babel'],
                    // include: [
                    //     path.join(__dirname, 'src')
                    // ],
                    include: [ path.resolve(__dirname, 'src') ],
                    // exclude: /(node_modules|bower_components)/,
                    // exclude: [
                    // //    path.resolve(__dirname, 'dist'),
                    //    path.resolve(__dirname, 'node_modules')
                    // ],
                    plugins: ['transform-runtime']
                },
            ],
            plugins: [
                extractCSS,
                new webpack.optimize.UglifyJsPlugin({
                    compress: {
                        warnings: false,
                        drop_console: true,
                        unsafe: true
                    }
                })
            ]
        },
    
        // externals: [
        //     {
        //         react: {
        //             root: 'React',
        //             commonjs2: 'react',
        //             commonjs: 'react',
        //             amd: 'react',
        //         },
        //     },
        //     {
        //         'react-dom': {
        //             root: 'ReactDOM',
        //             commonjs2: 'react-dom',
        //             commonjs: 'react-dom',
        //             amd: 'react-dom',
        //         },
        //     },
        // ],
    };
    
}