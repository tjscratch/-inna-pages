/**
 * Created by max on 03.08.16.
 */
import React, {Component, PropTypes} from 'react'
import {Input} from '../src/index'
import {reduxForm} from 'redux-form'
export const fields = ['username', 'email']

const validate = values => {
    const errors = {}
    if (!values.username) {
        errors.username = 'Required'
    } else if (values.username.length > 15) {
        errors.username = 'Must be 15 characters or less'
    }
    if (!values.email) {
        errors.email = 'Required'
    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
        errors.email = 'Invalid email address'
    }
    return errors
}

class ExampleForm extends Component {
    
    constructor(props) {
        super(props)
    }
    
    render() {
        const {fields: {username, email}, resetForm, handleSubmit, submitting} = this.props
        return (
            <div>
                <form onSubmit={handleSubmit}>
                    <Input label='Email'
                           className='Email'
                           {...email}
                    />
                    <br/>
                    <Input label='Login'
                           className='Login'
                           {...username}
                    />
                    <div>
                        <button type='submit' disabled={submitting}>
                            {submitting ? <i/> : <i/>} Submit
                        </button>
                        <button type='button' disabled={submitting} onClick={resetForm}>
                            Clear Values
                        </button>
                    </div>
                </form>
            </div>
        )
    }
}

ExampleForm.propTypes = {
    fields: PropTypes.object.isRequired,
    handleSubmit: PropTypes.func.isRequired,
    resetForm: PropTypes.func.isRequired,
    submitting: PropTypes.bool.isRequired
}

export default reduxForm({
    form: 'synchronousValidation',
    fields,
    validate
})(ExampleForm)